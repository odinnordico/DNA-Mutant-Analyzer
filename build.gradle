plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
    id 'jacoco'
}

group = 'com.meli.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.0.2'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    finalizedBy jacocoTestCoverageVerification
    reports {
        xml.enabled true
        csv.enabled false
    }
    test {
        jacoco {
            excludes = [
                    'com/meli/test/dnamutantanalyzer/config/**',
                    'com/meli/test/dnamutantanalyzer/exception/**',
                    'com/meli/test/dnamutantanalyzer/model/**'
            ]
        }
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            'com/meli/test/dnamutantanalyzer/config/**',
                            'com/meli/test/dnamutantanalyzer/exception/**',
                            'com/meli/test/dnamutantanalyzer/model/**'
                    ]
            )
        }))
    }

    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}
